backup but same id with studyhubfiles and files sub collection
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/file_card_model.dart';

class FileRepository {
  final FirebaseFirestore firestore;

  FileRepository({required this.firestore});

  /// Add a file to StudyHubFiles only
  Future<void> addStudyHubFile(
    String uid,
    FileCardModel file,
    String docId,
  ) async {
    final docRef = firestore
        .collection('users')
        .doc(uid)
        .collection('studyHubFiles')
        .doc(docId);

    final fileData = {
      ...file.toMap(),
      'id': docId,
      'timestamp': FieldValue.serverTimestamp(),
    };

    await docRef.set(fileData);
  }

  /// Add a file to Files tab only (metadata-only)
  Future<void> addFilesTabFile(
    String uid,
    FileCardModel file,
    String docId,
  ) async {
    final docRef = firestore
        .collection('users')
        .doc(uid)
        .collection('files')
        .doc(docId);

    await docRef.set({
      ...file.toMap(),
      'id': docId,
      'timestamp': FieldValue.serverTimestamp(),
    });
  }

  /// Stream Study Hub files
  Stream<List<FileCardModel>> studyHubFilesStream(
    String uid,
  ) {
    return firestore
        .collection('users')
        .doc(uid)
        .collection('studyHubFiles')
        .orderBy('timestamp', descending: true)
        .snapshots()
        .map(
          (snapshot) => snapshot.docs
              .map(
                (doc) => FileCardModel.fromMap(
                  doc.data(),
                  id: doc.id,
                ),
              )
              .toList(),
        );
  }

  /// Stream Files tab files
  Stream<List<FileCardModel>> filesTabFilesStream(
    String uid,
  ) {
    return firestore
        .collection('users')
        .doc(uid)
        .collection('files')
        .orderBy('timestamp', descending: true)
        .snapshots()
        .map(
          (snapshot) => snapshot.docs
              .map(
                (doc) => FileCardModel.fromMap(
                  doc.data(),
                  id: doc.id,
                ),
              )
              .toList(),
        );
  }

  /// Update file summary in StudyHubFiles
  Future<void> updateFileSummary(
    String uid,
    String fileId,
    Map<String, dynamic>? summaryJson,
  ) async {
    final docRef = firestore
        .collection('users')
        .doc(uid)
        .collection('studyHubFiles')
        .doc(fileId);

    await docRef.update({'summaryJson': summaryJson});
  }

  /// Delete file from both StudyHubFiles and Files tab
  Future<void> deleteFile(String uid, String fileId) async {
    final userRef = firestore.collection('users').doc(uid);
    final batch = firestore.batch();

    batch.delete(
      userRef.collection('studyHubFiles').doc(fileId),
    );
    batch.delete(userRef.collection('files').doc(fileId));

    await batch.commit();
    print("üóëÔ∏è Deleted file $fileId from both tabs");
  }
}
